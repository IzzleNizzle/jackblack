{"version":3,"sources":["logo.svg","AppContext.js","components/CardList.js","components/SeeWhoWins.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MyContext","React","createContext","MyProvider","state","handOne","handTwo","handThree","handFour","cleanInp","val","Provider","value","this","setHandOne","setState","setHandTwo","setHandThree","setHandFour","props","children","Component","withContext","Consumer","globalState","context","useState","deckId","setDeckId","cardOne","setCardOne","cardTwo","setCardTwo","cardThree","setCardThree","cardFour","setCardFour","useEffect","fetch","then","response","json","resJson","className","src","alt","srcset","onClick","cards","image","winner","setWinner","playerOneScore","parseInt","playerTwoScore","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0fa1f9a3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\n\nconst MyContext = React.createContext();\n\nexport class MyProvider extends Component {\n    state = {\n        handOne: '',\n        handTwo: '',\n        handThree: '',\n        handFour: '',\n    }\n    cleanInp = val => {\n        switch (val) {\n            case 'KING':\n                return 12\n            case 'QUEEN':\n                return 11\n            case 'JACK':\n                return 10\n            case 'ACE':\n                return 11\n            default:\n                return val\n        }\n    }\n    render() {\n        return (\n            <MyContext.Provider value={{\n                state: this.state,\n                setHandOne: (val) => {\n                    val = this.cleanInp(val)\n                    this.setState({\n                        handOne: val\n                    })\n                },\n                setHandTwo: (val) => {\n                    val = this.cleanInp(val)\n                    this.setState({\n                        handTwo: val\n                    })\n                },\n                setHandThree: (val) => {\n                    val = this.cleanInp(val)\n                    this.setState({\n                        handThree: val\n                    })\n                },\n                setHandFour: (val) => {\n                    val = this.cleanInp(val)\n                    this.setState({\n                        handFour: val\n                    })\n                }\n            }}>\n                {this.props.children}\n            </MyContext.Provider>\n        )\n    }\n}\n\nexport const withContext = Component => {\n    return props => {\n        return (\n            <MyContext.Consumer>\n                {globalState => {\n                    return <Component {...globalState} {...props} />;\n                }}\n            </MyContext.Consumer>\n        );\n    };\n};\n","import React, { useEffect, useState } from 'react'\nimport { withContext } from \"../AppContext\"\n\nfunction CardList(context) {\n    const [deckId, setDeckId] = useState()\n\n    const [cardOne, setCardOne] = useState()\n    const [cardTwo, setCardTwo] = useState()\n\n\n    const [cardThree, setCardThree] = useState()\n    const [cardFour, setCardFour] = useState()\n\n\n    useEffect(() => {\n        fetch(`https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1`)\n            .then(response => response.json())\n            .then(resJson => setDeckId(resJson[\"deck_id\"]))\n    }, [])\n\n    const getCards = () => {\n        fetch(`https://deckofcardsapi.com/api/deck/${deckId}/draw/?count=4`)\n            .then(response => response.json())\n            .then(resJson => {\n                setCardOne(resJson.cards[0].image)\n                context.setHandOne(resJson.cards[0].value)\n                setCardTwo(resJson.cards[1].image)\n                context.setHandTwo(resJson.cards[1].value)\n                setCardThree(resJson.cards[2].image)\n                context.setHandThree(resJson.cards[2].value)\n                setCardFour(resJson.cards[3].image)\n                context.setHandFour(resJson.cards[3].value)\n            })\n\n    }\n    return (\n        <div>\n            <div className=\"handOne\">\n                <img src={cardOne} alt=\"\" srcset=\"\" />\n                <img src={cardTwo} alt=\"\" srcset=\"\" />\n            </div>\n            <div className=\"handTwo\">\n                <img src={cardThree} alt=\"\" srcset=\"\" />\n                <img src={cardFour} alt=\"\" srcset=\"\" />\n            </div>\n            <button onClick={getCards}>Get new cards</button>\n        </div>\n    )\n}\n\nexport default withContext(CardList)","import React, { useEffect, useState } from 'react'\nimport { withContext } from \"../AppContext\"\n\nfunction SeeWhoWins(context) {\n    const [winner, setWinner] = useState('')\n    useEffect(() => {\n        let playerOneScore = parseInt(context.state.handOne) + parseInt(context.state.handTwo)\n        let playerTwoScore = parseInt(context.state.handThree) + parseInt(context.state.handFour)\n        console.log(playerOneScore, playerTwoScore);\n\n        if (playerOneScore > 21) {\n            if (playerTwoScore <= 21) {\n                setWinner('player two won')\n                return\n            }\n        }\n\n        if (playerTwoScore > 21) {\n            if (playerOneScore <= 21) {\n                setWinner('player one won')\n                return\n            }\n        }\n\n        if (playerOneScore > 21 && playerTwoScore > 21) {\n            console.log('both players busted')\n            setWinner('both players busted')\n            return\n        }\n\n        if (playerOneScore > playerTwoScore) {\n            console.log('player one wins')\n            setWinner('player one Won')\n        }\n        else if (playerTwoScore > playerOneScore) {\n            console.log('player two wins')\n            setWinner('player two won')\n        }\n        else {\n            setWinner('Get cards to play')\n        }\n        console.log(context);\n    }, [context])\n    return (\n        <div>\n            {winner ? `${winner}` : \"loading...\"}\n        </div>\n    )\n}\n\nexport default withContext(SeeWhoWins)\n","import React from 'react';\nimport logo from './logo.svg';\nimport { MyProvider } from './AppContext';\nimport CardList from './components/CardList';\nimport SeeWhoWins from './components/SeeWhoWins';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <MyProvider>\n        <CardList />\n        <SeeWhoWins />\n        {/* <CardList /> */}\n      </MyProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}